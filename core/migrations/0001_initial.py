# Generated by Django 5.2.6 on 2025-09-08 22:07

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DataSyncStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("resource_type", models.CharField(max_length=50, unique=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                ("total_records", models.IntegerField(default=0)),
                ("is_syncing", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Film",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("swapi_id", models.IntegerField(unique=True)),
                ("title", models.CharField(db_index=True, max_length=255)),
                ("episode_id", models.IntegerField()),
                ("opening_crawl", models.TextField()),
                ("director", models.CharField(max_length=255)),
                ("producer", models.CharField(max_length=255)),
                ("release_date", models.DateField()),
            ],
            options={
                "ordering": ["episode_id"],
                "indexes": [
                    models.Index(fields=["title"], name="core_film_title_efa29a_idx"),
                    models.Index(
                        fields=["episode_id"], name="core_film_episode_1fc5aa_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Starship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("swapi_id", models.IntegerField(unique=True)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("model", models.CharField(max_length=255)),
                ("manufacturer", models.CharField(max_length=255)),
                (
                    "cost_in_credits",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("length", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "max_atmosphering_speed",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("crew", models.CharField(blank=True, max_length=50, null=True)),
                ("passengers", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "cargo_capacity",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "hyperdrive_rating",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("starship_class", models.CharField(max_length=255)),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="core_starsh_name_679950_idx"),
                    models.Index(
                        fields=["starship_class"], name="core_starsh_starshi_b19b72_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "vote_type",
                    models.CharField(
                        choices=[
                            ("character", "Character"),
                            ("film", "Film"),
                            ("starship", "Starship"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("item_id", models.PositiveIntegerField()),
                (
                    "votes",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["vote_type", "votes"],
                        name="core_vote_vote_ty_37e0c0_idx",
                    )
                ],
                "unique_together": {("vote_type", "item_id")},
            },
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("swapi_id", models.IntegerField(unique=True)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("height", models.CharField(blank=True, max_length=10, null=True)),
                ("mass", models.CharField(blank=True, max_length=10, null=True)),
                ("hair_color", models.CharField(blank=True, max_length=50, null=True)),
                ("skin_color", models.CharField(blank=True, max_length=50, null=True)),
                ("eye_color", models.CharField(blank=True, max_length=50, null=True)),
                ("birth_year", models.CharField(blank=True, max_length=20, null=True)),
                ("gender", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "films",
                    models.ManyToManyField(
                        blank=True, related_name="characters", to="core.film"
                    ),
                ),
                (
                    "starships",
                    models.ManyToManyField(
                        blank=True, related_name="pilots", to="core.starship"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="core_charac_name_c1ae8c_idx"),
                    models.Index(
                        fields=["gender"], name="core_charac_gender_53c1c9_idx"
                    ),
                ],
            },
        ),
    ]
